# Ingress for external access
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: robinhood-ingress
  namespace: robinhood-clone
  labels:
    app: robinhood-clone
  annotations:
    # Use NGINX ingress controller
    kubernetes.io/ingress.class: "nginx"
    # Enable SSL redirect
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    # Enable CORS
    nginx.ingress.kubernetes.io/enable-cors: "true"
    nginx.ingress.kubernetes.io/cors-allow-origin: "*"
    nginx.ingress.kubernetes.io/cors-allow-methods: "GET, POST, PUT, DELETE, OPTIONS"
    nginx.ingress.kubernetes.io/cors-allow-headers: "DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization"
    # Rate limiting
    nginx.ingress.kubernetes.io/rate-limit: "100"
    nginx.ingress.kubernetes.io/rate-limit-window: "1m"
    # Connection limits
    nginx.ingress.kubernetes.io/limit-connections: "10"
    # Proxy settings
    nginx.ingress.kubernetes.io/proxy-connect-timeout: "60"
    nginx.ingress.kubernetes.io/proxy-send-timeout: "60"
    nginx.ingress.kubernetes.io/proxy-read-timeout: "60"
    # Enable gzip compression
    nginx.ingress.kubernetes.io/enable-gzip: "true"
    # Security headers
    nginx.ingress.kubernetes.io/configuration-snippet: |
      add_header X-Frame-Options "SAMEORIGIN" always;
      add_header X-Content-Type-Options "nosniff" always;
      add_header X-XSS-Protection "1; mode=block" always;
      add_header Referrer-Policy "strict-origin-when-cross-origin" always;
spec:
  tls:
  - hosts:
    - robinhood-clone.local
    - api.robinhood-clone.local
    secretName: robinhood-tls
  rules:
  # Frontend routing
  - host: robinhood-clone.local
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: frontend-service
            port:
              number: 80
  # Backend API routing
  - host: api.robinhood-clone.local
    http:
      paths:
      - path: /api
        pathType: Prefix
        backend:
          service:
            name: backend-service
            port:
              number: 5001
  # Alternative: Single domain with path-based routing
  - host: robinhood-clone.local
    http:
      paths:
      - path: /api
        pathType: Prefix
        backend:
          service:
            name: backend-service
            port:
              number: 5001
      - path: /
        pathType: Prefix
        backend:
          service:
            name: frontend-service
            port:
              number: 80
---
# TLS Certificate (self-signed for development)
apiVersion: v1
kind: Secret
metadata:
  name: robinhood-tls
  namespace: robinhood-clone
  labels:
    app: robinhood-clone
type: kubernetes.io/tls
data:
  # Replace with actual certificate and key (base64 encoded)
  # For development, you can generate self-signed certificates:
  # openssl req -x509 -nodes -days 365 -newkey rsa:2048 \
  #   -keyout tls.key -out tls.crt -subj "/CN=robinhood-clone.local"
  # kubectl create secret tls robinhood-tls --cert=tls.crt --key=tls.key
  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0t  # placeholder
  tls.key: LS0tLS1CRUdJTiBQUklWQVRFIEtFWS0tLS0t  # placeholder
---
# Network Policy for security
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: robinhood-network-policy
  namespace: robinhood-clone
  labels:
    app: robinhood-clone
spec:
  podSelector: {}
  policyTypes:
  - Ingress
  - Egress
  ingress:
  # Allow ingress from ingress controller
  - from:
    - namespaceSelector:
        matchLabels:
          name: ingress-nginx
    ports:
    - protocol: TCP
      port: 5001
    - protocol: TCP
      port: 19006
  # Allow internal communication
  - from:
    - podSelector: {}
    ports:
    - protocol: TCP
      port: 5432  # PostgreSQL
    - protocol: TCP
      port: 6379  # Redis
    - protocol: TCP
      port: 5001  # Backend
    - protocol: TCP
      port: 19006 # Frontend
  egress:
  # Allow DNS resolution
  - to: []
    ports:
    - protocol: UDP
      port: 53
  # Allow HTTPS for external APIs
  - to: []
    ports:
    - protocol: TCP
      port: 443
  # Allow internal communication
  - to:
    - podSelector: {}
    ports:
    - protocol: TCP
      port: 5432
    - protocol: TCP
      port: 6379
    - protocol: TCP
      port: 5001
    - protocol: TCP
      port: 19006